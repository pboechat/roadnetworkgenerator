#ifndef GLOBALS_H
#define GLOBALS_H

#include "Defines.h"
#include <Configuration.h>
#include <BaseGraph.h>
#include <Graph.h>
#include <Primitive.h>
#include <MarshallingQueue.h>
#ifdef USE_QUADTREE
#include <Quadtree.h>
#endif
#include <ImageMap.h>

#include <vector_math.h>

//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE Configuration* g_dConfiguration;
//////////////////////////////////////////////////////////////////////////
extern HOST_CODE Configuration* g_hConfiguration;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE RoadNetworkGraph::Graph* g_dGraph;
//////////////////////////////////////////////////////////////////////////
extern HOST_CODE RoadNetworkGraph::BaseGraph* g_hGraphCopy;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE unsigned char* g_dWorkQueuesBuffers1[NUM_PROCEDURES];
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE unsigned char* g_dWorkQueuesBuffers2[NUM_PROCEDURES];
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE MarshallingQueue g_dWorkQueues1[NUM_PROCEDURES];
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE MarshallingQueue g_dWorkQueues2[NUM_PROCEDURES];
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE unsigned char* g_dPopulationDensitiesSamplingBuffer;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE unsigned int* g_dDistancesSamplingBuffer;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE RoadNetworkGraph::Vertex* g_dVertices;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE RoadNetworkGraph::Edge* g_dEdges;
//////////////////////////////////////////////////////////////////////////
extern HOST_CODE RoadNetworkGraph::Vertex* g_hVerticesCopy;
//////////////////////////////////////////////////////////////////////////
extern HOST_CODE RoadNetworkGraph::Edge* g_hEdgesCopy;
//////////////////////////////////////////////////////////////////////////
extern HOST_CODE RoadNetworkGraph::Primitive* g_hPrimitives;
//////////////////////////////////////////////////////////////////////////
extern HOST_CODE unsigned int g_hNumExtractedPrimitives;
#ifdef USE_QUADTREE
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE RoadNetworkGraph::QuadTree* g_dQuadtree;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE RoadNetworkGraph::Quadrant* g_dQuadrants;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE RoadNetworkGraph::QuadrantEdges* g_dQuadrantsEdges;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE RoadNetworkGraph::EdgeIndex* g_dQueryResults;
#endif
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE unsigned char* g_dPopulationDensityMapData;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE unsigned char* g_dWaterBodiesMapData;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE unsigned char* g_dBlockadesMapData;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE unsigned char* g_dNaturalPatternMapData;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE unsigned char* g_dRadialPatternMapData;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE unsigned char* g_dRasterPatternMapData;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE ImageMap* g_dPopulationDensityMap;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE ImageMap* g_dWaterBodiesMap;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE ImageMap* g_dBlockadesMap;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE ImageMap* g_dNaturalPatternMap;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE ImageMap* g_dRadialPatternMap;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE ImageMap* g_dRasterPatternMap;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE vml_vec4* g_dVerticesBuffer;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE vml_vec4* g_dColorsBuffer;
//////////////////////////////////////////////////////////////////////////
extern DEVICE_CODE unsigned int* g_dIndicesBuffer;

//////////////////////////////////////////////////////////////////////////
GLOBAL_CODE void initializeImageMap(ImageMap* imageMap, unsigned int mapWidth, unsigned int mapHeight, const unsigned char* mapData);
//////////////////////////////////////////////////////////////////////////
GLOBAL_CODE void clearWorkQueuesBuffers();
//////////////////////////////////////////////////////////////////////////
GLOBAL_CODE void initializeWorkQueue(unsigned int capacity, unsigned int itemSize);

//////////////////////////////////////////////////////////////////////////
HOST_CODE void allocateWorkQueues(unsigned int maxWorkQueueCapacity);
//////////////////////////////////////////////////////////////////////////
HOST_CODE void allocateSamplingBuffers(unsigned int samplingArc);
//////////////////////////////////////////////////////////////////////////
HOST_CODE void allocateGraphBuffers(unsigned int maxVertices, unsigned int maxEdges);
#ifdef USE_QUADTREE
//////////////////////////////////////////////////////////////////////////
HOST_CODE void allocateQuadtreeBuffers(unsigned int maxResultsPerQuery, unsigned int maxQuadrants);
#endif
//////////////////////////////////////////////////////////////////////////
HOST_CODE void allocateGraphicsBuffers(unsigned int verticesBufferSize, unsigned int indicesBufferSize);

//////////////////////////////////////////////////////////////////////////
HOST_CODE void copyGraphBuffers(unsigned int maxVertices, unsigned int maxEdges);

//////////////////////////////////////////////////////////////////////////
HOST_CODE void allocateAndInitializeImageMaps(const char* populationDensityMapFilePath,
									const char* waterBodiesMapFilePath,
									const char* blockadesMapFilePath,
									const char* naturalPatternMapFilePath,
									const char* radialPatternMapFileMap,
									const char* rasterPatternMapFileMap,
									unsigned int mapWidth,
									unsigned int mapHeight);

//////////////////////////////////////////////////////////////////////////
HOST_CODE void freeWorkQueues();
//////////////////////////////////////////////////////////////////////////
HOST_CODE void freeSamplingBuffers();
//////////////////////////////////////////////////////////////////////////
HOST_CODE void freeGraphBuffers();
#ifdef USE_QUADTREE
//////////////////////////////////////////////////////////////////////////
HOST_CODE void freeQuadtreeBuffers();
#endif
//////////////////////////////////////////////////////////////////////////
HOST_CODE void freeImageMaps();
//////////////////////////////////////////////////////////////////////////
HOST_CODE void freeGraphicsBuffers();

#endif